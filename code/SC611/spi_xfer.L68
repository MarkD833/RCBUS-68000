00110000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 12/05/2025 18:24:50

00000000                             1  *------------------------------------------------------------------------------
00000000                             2  * SPI_XFER.X68
00000000                             3  *------------------------------------------------------------------------------
00000000                             4  * Simple program to transfer some bytes using bit banged SPI via an SC611
00000000                             5  * Micro SD module using SPI Mode 0.
00000000                             6  *
00000000                             7  * The SC611 should have jumpers set for I/O space address $69.
00000000                             8  *
00000000                             9  * SD card adapter CS is controlled by bit 3
00000000                            10  * MOSI is controlled by bit 0
00000000                            11  * SCK  is controlled by bit 4
00000000                            12  * MISO is read in on bit 7
00000000                            13  *
00000000                            14  * Register D1 holds a working copy of the last byte written to the SC611
00000000                            15  *
00000000                            16  
00000000                            17      INCLUDE "..\asm-inc\memory.inc"
00000000                            18  
00000000  =00007000                 19  MON_BASE        EQU     $7000
00000000                            20  
00000000  =00009000                 21  EHBASIC_BASE    EQU     $9000
00000000                            22  
00000000  =00100000                 23  RAM_BASE        EQU     $100000
00000000  =00100000                 24  RAM_LEN         EQU     $100000
00000000                            25  
00000000  =00100000                 26  VEC_BASE        EQU     RAM_BASE
00000000  =00000400                 27  VEC_SIZE        EQU     $400         * table takes up 1024 bytes
00000000                            28  
00000000  =00F80000                 29  IO_BASE         EQU     $F80000     * I/O space base address = 00F8_0000
00000000                            30  
00000000  =00F00000                 31  MEM_BASE        EQU     $F00000     * Mem space base address = 00F0_0000
00000000                            32  
00000000  =00000400                 33  CPM_BASE        EQU     $0400       * CP/M-68K entry point
00000000                            34  
00000000  =001FD800                 35  CCP_BSS_BASE    EQU     $1FD800
00000000  =00001000                 36  CCP_PRIV        EQU     4096
00000000                            37  
00000000  =00000800                 38  MON_PRIV        EQU     2048
00000000                            39  
00000000  =00001000                 40  BIOS_PRIV       EQU     4096
00000000                            41  
00000000  =001FF800                 42  STACK_START     EQU     RAM_BASE+RAM_LEN-MON_PRIV
00000000  =001FF800                 43  -------------------- end include --------------------
00000000                            44  
00000000  =00000010                 45  SCK         EQU     $10
00000000  =00000008                 46  SDCS        EQU     $08
00000000  =00000001                 47  MOSI        EQU     $01
00000000  =00000080                 48  MISO        EQU     $80
00000000                            49      
00000000                            50  *******************************************************************************
00000000                            51  * These addresses are as configured on the individual boards in what would be
00000000                            52  * the Z80 8-bit I/O space.
00000000                            53  *
00000000  =00000069                 54  SC611ADDR   EQU     $69           * SC611 base address is 0x69
00000000                            55  
00000000                            56  *******************************************************************************
00000000                            57  * These are the Z80 8-bit I/O space addresses converted into 68000 memory space
00000000                            58  *
00000000  =00F800D3                 59  SC611       EQU     IO_BASE+(SC611ADDR<<1)+1
00000000                            60      
00110000                            61      ORG     $110000
00110000                            62  
00110000                            63  START:
00110000  43FA 00E0                 64      lea     strTitle(PC), a1    * Show the program details
00110004  103C 000E                 65      move.b  #14,d0              * EASy68K task 14
00110008  4E4F                      66      trap    #15
0011000A                            67  
0011000A  4281                      68      clr.l   d1
0011000C                            69  
0011000C                            70      ; SPI Mode 0 so set SCK low (and make sure CS is high)
0011000C  123C 0008                 71      move.b  #SDCS,d1
00110010  13C1 00F800D3             72      move.b  d1,SC611
00110016                            73  
00110016                            74      ; silly delay to let port settle
00110016  203C 0000FFFF             75      move.l  #$FFFF,d0
0011001C                            76  .loop1:
0011001C  51C8 FFFE                 77      dbra    d0,.loop1
00110020                            78      
00110020                            79      * set the SD card socket CS low
00110020  0201 00F7                 80      andi.b  #~SDCS,d1
00110024  13C1 00F800D3             81      move.b  d1,SC611
0011002A                            82  
0011002A  103C 00AA                 83      move.b  #$AA,d0
0011002E  6100 0036                 84      bsr.w   spiXfer
00110032  103C 0055                 85      move.b  #$55,d0
00110036  6100 002E                 86      bsr.w   spiXfer
0011003A  103C 00F0                 87      move.b  #$F0,d0
0011003E  6100 0026                 88      bsr.w   spiXfer
00110042  103C 000F                 89      move.b  #$0F,d0
00110046  6100 001E                 90      bsr.w   spiXfer
0011004A                            91      
0011004A  303C 1234                 92      move.w  #$1234,d0
0011004E  6100 0054                 93      bsr.w   spiXfer16
00110052  303C BEEF                 94      move.w  #$BEEF,d0
00110056  6100 004C                 95      bsr.w   spiXfer16
0011005A                            96      
0011005A                            97      * set the SD card socket CS high
0011005A  0001 0008                 98      ori.b   #SDCS,d1
0011005E  13C1 00F800D3             99      move.b  d1,SC611
00110064  4E75                     100      rts
00110066                           101      
00110066                           102  *------------------------------------------------------------------------------
00110066                           103  * Exchange a single byte via SPI
00110066                           104  * D0 holds the byte to send and the received byte
00110066                           105  * D1 holds a working copy of the last byte written to the SC611 
00110066                           106  * D2 holds the bit count
00110066                           107  * D3 holds current read state of the SC611 port
00110066                           108  *------------------------------------------------------------------------------
00110066                           109  spiXfer:
00110066  0280 000000FF            110      andi.l  #$FF,d0             * clear all bits but the lower 8 bits
0011006C  7407                     111      move.l  #7,d2               * 8 bits (DBRA needs 1 less)
0011006E                           112  .nextBit:
0011006E  E209                     113      lsr.b   #1,d1               * shift working copy right 1 bit
00110070  E308                     114      lsl.b   #1,d0               * extend bit holds MOSI bit to send
00110072  E311                     115      roxl.b  #1,d1               * shift extend bit into working copy
00110074                           116      
00110074  13C1 00F800D3            117      move.b  d1,SC611            * write the new data bit out
0011007A  0001 0010                118      ori.b   #SCK,d1
0011007E  13C1 00F800D3            119      move.b  d1,SC611            * write the new clock bit out
00110084                           120  
00110084  4840                     121      swap    d0                  * get rx bits into LSW
00110086  1639 00F800D3            122      move.b  SC611,d3            * read the current state of the SC611
0011008C  E30B                     123      lsl.b   #1,d3               * extend bit holds MISO bit received
0011008E  E310                     124      roxl.b  #1,d0               * shift extend bit into received byte
00110090                           125      
00110090  0201 00EF                126      andi.b  #~SCK,d1
00110094  13C1 00F800D3            127      move.b  d1,SC611            * write the new clock bit out
0011009A                           128  
0011009A  4840                     129      swap    d0                  * get tx bits into LSW
0011009C  51CA FFD0                130      dbra    d2,.nextBit         * repeat for next bit
001100A0                           131  
001100A0                           132      * exchange done so switch the rx bits into the LSW
001100A0  4840                     133      swap    d0                  * get rx bits back into LSW
001100A2  4E75                     134      rts
001100A4                           135      
001100A4                           136  *------------------------------------------------------------------------------
001100A4                           137  * Exchange a 16-bit word via SPI
001100A4                           138  * D0 holds the word to send and the received byte
001100A4                           139  * D1 holds a working copy of the last byte written to the SC611 
001100A4                           140  * D2 holds the bit count
001100A4                           141  * D3 holds current read state of the SC611 port
001100A4                           142  *------------------------------------------------------------------------------
001100A4                           143  spiXfer16:
001100A4  0280 0000FFFF            144      andi.l  #$FFFF,d0           * clear upper 16 bits
001100AA  740F                     145      move.l  #15,d2              * 16 bits (DBRA needs 1 less)
001100AC                           146  .nextBit:
001100AC  E209                     147      lsr.b   #1,d1               * shift working copy right 1 bit
001100AE  E348                     148      lsl.w   #1,d0               * extend bit holds MOSI bit to send
001100B0  E311                     149      roxl.b  #1,d1               * shift extend bit into working copy
001100B2                           150  
001100B2  13C1 00F800D3            151      move.b  d1,SC611            * write the new data bit out
001100B8  0001 0010                152      ori.b   #SCK,d1
001100BC  13C1 00F800D3            153      move.b  d1,SC611            * write the new clock bit out
001100C2                           154  
001100C2  4840                     155      swap    d0                  * get rx bits into LSW
001100C4  1639 00F800D3            156      move.b  SC611,d3            * read the current state of the SC611
001100CA  E30B                     157      lsl.b   #1,d3               * extend bit holds MISO bit received
001100CC  E350                     158      roxl.w  #1,d0               * shift extend bit into received word
001100CE                           159  
001100CE  0201 00EF                160      andi.b  #~SCK,d1
001100D2  13C1 00F800D3            161      move.b  d1,SC611            * write the new clock bit out
001100D8                           162  
001100D8  4840                     163      swap    d0                  * get tx bits into LSW
001100DA  51CA FFD0                164      dbra    d2,.nextBit         * repeat for next bit
001100DE                           165  
001100DE                           166      * exchange done so switch the rx bits into the LSW
001100DE  4840                     167      swap    d0                  * get rx bits back into LSW
001100E0  4E75                     168      rts
001100E2                           169  
001100E2                           170      
001100E2                           171  strTitle:
001100E2= 52 43 42 75 73 20 ...    172      dc.b    'RCBus 68000 Micro SD Demo - SC611 @ Address 0x69',10,13,0
00110115                           173  
00110115                           174      END START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIOS_PRIV           1000
CCP_BSS_BASE        1FD800
CCP_PRIV            1000
CPM_BASE            400
EHBASIC_BASE        9000
IO_BASE             F80000
MEM_BASE            F00000
MISO                80
MON_BASE            7000
MON_PRIV            800
MOSI                1
RAM_BASE            100000
RAM_LEN             100000
SC611               F800D3
SC611ADDR           69
SCK                 10
SDCS                8
SPIXFER             110066
SPIXFER16           1100A4
SPIXFER16:NEXTBIT   1100AC
SPIXFER:NEXTBIT     11006E
STACK_START         1FF800
START               110000
START:LOOP1         11001C
STRTITLE            1100E2
VEC_BASE            100000
VEC_SIZE            400
