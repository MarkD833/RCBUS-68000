00110000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 10/05/2025 14:06:07

00000000                             1  *------------------------------------------------------------------------------
00000000                             2  * I2C_SCAN.X68
00000000                             3  *------------------------------------------------------------------------------
00000000                             4  * Simple program to scan the I2C bus via an SC704 I2C bus master card
00000000                             5  * and report back any active I2C devices.
00000000                             6  *
00000000                             7  * SCL is controlled by bit 0 and SDA is controlled by bit 7.
00000000                             8  *
00000000                             9  
00000000                            10      INCLUDE "..\asm-inc\memory.inc"
00000000                            11  
00000000  =00007000                 12  MON_BASE        EQU     $7000
00000000                            13  
00000000  =00009000                 14  EHBASIC_BASE    EQU     $9000
00000000                            15  
00000000  =00100000                 16  RAM_BASE        EQU     $100000
00000000  =00100000                 17  RAM_LEN         EQU     $100000
00000000                            18  
00000000  =00100000                 19  VEC_BASE        EQU     RAM_BASE
00000000  =00000400                 20  VEC_SIZE        EQU     $400         * table takes up 1024 bytes
00000000                            21  
00000000  =00F80000                 22  IO_BASE         EQU     $F80000     * I/O space base address = 00F8_0000
00000000                            23  
00000000  =00F00000                 24  MEM_BASE        EQU     $F00000     * Mem space base address = 00F0_0000
00000000                            25  
00000000  =00000400                 26  CPM_BASE        EQU     $0400       * CP/M-68K entry point
00000000                            27  
00000000  =001FD800                 28  CCP_BSS_BASE    EQU     $1FD800
00000000  =00001000                 29  CCP_PRIV        EQU     4096
00000000                            30  
00000000  =00000800                 31  MON_PRIV        EQU     2048
00000000                            32  
00000000  =00001000                 33  BIOS_PRIV       EQU     4096
00000000                            34  
00000000  =001FF800                 35  STACK_START     EQU     RAM_BASE+RAM_LEN-MON_PRIV
00000000  =001FF800                 36  -------------------- end include --------------------
00000000                            37  
00000000                            38  *******************************************************************************
00000000                            39  * These addresses are as configured on the individual boards in what would be
00000000                            40  * the Z80 8-bit I/O space.
00000000                            41  *
00000000  =0000000C                 42  SC704ADDR   EQU     $0C           * SC704 default address is 12 (0x0C)
00000000                            43  
00000000                            44  *******************************************************************************
00000000                            45  * These are the Z80 8-bit I/O space addresses converted into 68000 memory space
00000000                            46  *
00000000  =00F80019                 47  SC704       EQU     IO_BASE+(SC704ADDR<<1)+1
00000000                            48      
00000000  =0000007F                 49  SDALO       EQU     $7F         * AND with this value
00000000  =00000080                 50  SDAHI       EQU     $80         * OR  with this value
00000000  =000000FE                 51  SCLLO       EQU     $FE         * AND with this value
00000000  =00000001                 52  SCLHI       EQU     $01         * OR  with this value
00000000                            53  
00110000                            54      ORG     $110000
00110000                            55  
00110000                            56  START:
00110000  43FA 0110                 57      lea     strTitle(PC), a1    * Show the program details
00110004  103C 000E                 58      move.b  #14,d0              * EASy68K task 14
00110008  4E4F                      59      trap    #15
0011000A                            60  
0011000A  143C 0008                 61      move.b  #8,d2               * D2 = current I2C address
0011000E                            62  LOOP:
0011000E  6100 0038                 63      bsr.w   I2CSTART            * START condition
00110012  1002                      64      move.b  d2,d0               * get the address to check
00110014  E300                      65      asl.b   #1,d0               * shift address left 1 bit
00110016  6100 0048                 66      bsr.w   I2CWRITE
0011001A  6510                      67      bcs.s   NAK                 * NACK = no device at that address
0011001C                            68      
0011001C  1002                      69      move.b  d2,d0               * get the address just checked
0011001E  6100 00C8                 70      bsr.w   writeByte
00110022                            71  
00110022  43FA 0167                 72      lea     strCRLF(PC), a1     * new line
00110026  103C 000E                 73      move.b  #14,d0              * EASy68K task 14
0011002A  4E4F                      74      trap    #15
0011002C                            75  NAK:
0011002C  6100 0094                 76      bsr.w   I2CSTOP             * STOP condition
00110030  5202                      77      addi.b  #1,d2               * increment the address
00110032  4E71                      78      nop
00110034  4E71                      79      nop
00110036  0C02 0080                 80      cmpi.b  #128,d2             * has it reached 128 yet?
0011003A  66D2                      81      bne.s   LOOP
0011003C                            82  
0011003C  43FA 013D                 83      lea     strFinished(PC), a1 * finished
00110040  103C 000E                 84      move.b  #14,d0              * EASy68K task 14
00110044  4E4F                      85      trap    #15
00110046                            86  
00110046                            87  ENDLESS:
00110046  60FE                      88      bra.s   ENDLESS             * stay here till reset
00110048                            89      
00110048                            90      
00110048                            91  *------------------------------------------------------------------------------
00110048                            92  * Send START condition
00110048                            93  * Assumes SDA and SCL are both HIGH already
00110048                            94  * D1 holds the last value written to the SC704
00110048                            95  *------------------------------------------------------------------------------
00110048                            96  I2CSTART:
00110048  123C 0001                 97      move.b  #SCLHI,d1
0011004C  13C1 00F80019             98      move.b  d1,SC704        * set SCL HIGH & SDA LOW
00110052  4E71                      99      nop
00110054  4E71                     100      nop
00110056  4201                     101      clr.b   d1
00110058  13C1 00F80019            102      move.b  d1,SC704        * set SCL LOW & SDA LOW
0011005E  4E75                     103      rts
00110060                           104      
00110060                           105  *------------------------------------------------------------------------------
00110060                           106  * write a byte - D0 holds the byte to send
00110060                           107  * C is set for a NACK and clear for an ACK
00110060                           108  * State of SCL & SDA held in D1
00110060                           109  *------------------------------------------------------------------------------
00110060                           110  I2CWRITE:
00110060  363C 0007                111      move.w  #7,d3           * number of bits to send minus 1
00110064                           112  .loop1:
00110064  3F00                     113      move.w  d0,-(sp)        * save the byte
00110066  0200 0080                114      andi.b  #$80,d0         * get just MSB of the byte
0011006A  13C0 00F80019            115      move.b  d0,SC704        * write out the bit with SCL LOW
00110070  0000 0001                116      ori.b   #SCLHI,d0       * SCL bit HIGH
00110074  13C0 00F80019            117      move.b  d0,SC704        * write out the bit with SCL HIGH
0011007A  4E71                     118      nop
0011007C  4E71                     119      nop
0011007E  4E71                     120      nop
00110080  4E71                     121      nop
00110082  0200 00FE                122      andi.b  #SCLLO,d0
00110086  13C0 00F80019            123      move.b  d0,SC704        * write out the bit with SCL LOW
0011008C  301F                     124      move.w  (sp)+,d0        * get the byte back
0011008E  E318                     125      rol.b   #1,d0           * shift so next bit to send is in the MSB
00110090  51CB FFD2                126      dbra    d3,.loop1
00110094                           127  
00110094                           128      * done 8 bits so check for ACK or NACK
00110094  103C 0080                129      move.b  #SDAHI,d0
00110098  13C0 00F80019            130      move.b  d0,SC704        * release the SDA line with SCL LOW
0011009E  4E71                     131      nop
001100A0  4E71                     132      nop
001100A2  0000 0001                133      ori.b   #SCLHI,d0       * SCL bit HIGH
001100A6  13C0 00F80019            134      move.b  d0,SC704        * write out SCL HIGH (and SDA HIGH)
001100AC  4E71                     135      nop
001100AE  4E71                     136      nop
001100B0  1039 00F80019            137      move.b  SC704,d0        * read the current SCL & SDA states
001100B6  13FC 0080 00F80019       138      move.b  #SDAHI,SC704    * set SCL LOW (and SDA HIGH)
001100BE                           139  
001100BE                           140      * bit 7 in D0 now holds the ACK (=0) or NACK (=1) response
001100BE  E300                     141      asl.b   #1,d0           * carry flag now holds ACK/NACK response
001100C0  4E75                     142      rts
001100C2                           143  
001100C2                           144  *------------------------------------------------------------------------------
001100C2                           145  * Send STOP condition
001100C2                           146  * SCL will already be low
001100C2                           147  *------------------------------------------------------------------------------
001100C2                           148  I2CSTOP:
001100C2  13FC 0000 00F80019       149      move.b  #$00,SC704      * set SCL LOW & SDA LOW
001100CA  4E71                     150      nop
001100CC  4E71                     151      nop
001100CE  4E71                     152      nop
001100D0  13FC 0001 00F80019       153      move.b  #$01,SC704      * set SCL HIGH & SDA LOW
001100D8  4E71                     154      nop
001100DA  4E71                     155      nop
001100DC  4E71                     156      nop
001100DE  13FC 0081 00F80019       157      move.b  #$81,SC704      * set SCL HIGH & SDA HIGH
001100E6  4E75                     158      rts
001100E8                           159  
001100E8                           160  *------------------------------------------------------------------------------
001100E8                           161  * Output a byte as 2 ASCII hexadecimal digits
001100E8                           162  * D0 holds the byte in bits 0..7
001100E8                           163  * NOTE: the writeNibble function must be directly after this function
001100E8                           164  *------------------------------------------------------------------------------
001100E8                           165  writeByte:
001100E8  1F00                     166      move.b  d0,-(sp)    ; save D0 first
001100EA  E818                     167      ror.b   #4,d0       ; get upper nibble
001100EC  6102                     168      bsr.s   writeNibble
001100EE  101F                     169      move.b  (sp)+,d0    ; restore D0
001100F0                           170      
001100F0                           171  *------------------------------------------------------------------------------
001100F0                           172  * Output 4 bits as an ASCII hexadecimal digit
001100F0                           173  * D0 holds the nibble in bits 0..3
001100F0                           174  *------------------------------------------------------------------------------
001100F0                           175  writeNibble:
001100F0  48E7 C000                176      movem.l  d0/d1,-(sp)    ; save D0 & D1 first
001100F4  0200 000F                177      andi.b  #$0F,d0     ; make sure we only have the lower 4 bits
001100F8  0C00 000A                178      cmpi.b  #10,d0      ; compare D0 to 10
001100FC  6502                     179      bcs.b   .wn1        ; less than 10 so don't add 7
001100FE  5E00                     180      addi.b  #07,d0      ; add 7
00110100                           181  .wn1:
00110100  0600 0030                182      addi.b  #'0',d0     ; add ASCII code for char zero
00110104  1200                     183      move.b  d0,d1
00110106  103C 0006                184      move.b  #6,d0       ; EASy68K task 6
0011010A  4E4F                     185      trap    #15         ; display the character 
0011010C  4CDF 0003                186      movem.l  (sp)+,d0/d1 ; restore D0 & D1
00110110  4E75                     187      rts
00110112                           188      
00110112                           189  
00110112                           190  strTitle:
00110112= 52 43 42 75 73 20 ...    191      dc.b    'RCBus 68000 I2C Scanner - SC704 @ Address 0x0C',10,13
00110142= 53 63 61 6E 6E 69 ...    192      dc.b    'Scanning for devices ...',10,13,0
0011015D                           193  strAckMsg:
0011015D= 41 43 4B 20 72 65 ...    194      dc.b    'ACK received',10,13,0
0011016C                           195  strNakMsg:
0011016C= 4E 41 4B 20 72 65 ...    196      dc.b    'NAK received',10,13,0
0011017B                           197  strFinished:
0011017B= 53 63 61 6E 20 66 ...    198      dc.b    'Scan finished',10,13,0
0011018B                           199  strCRLF:
0011018B= 0A 0D 00                 200      dc.b    10,13,0
0011018E                           201      
0011018E                           202      END     START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BIOS_PRIV           1000
CCP_BSS_BASE        1FD800
CCP_PRIV            1000
CPM_BASE            400
EHBASIC_BASE        9000
ENDLESS             110046
I2CSTART            110048
I2CSTOP             1100C2
I2CWRITE            110060
I2CWRITE:LOOP1      110064
IO_BASE             F80000
LOOP                11000E
MEM_BASE            F00000
MON_BASE            7000
MON_PRIV            800
NAK                 11002C
RAM_BASE            100000
RAM_LEN             100000
SC704               F80019
SC704ADDR           C
SCLHI               1
SCLLO               FE
SDAHI               80
SDALO               7F
STACK_START         1FF800
START               110000
STRACKMSG           11015D
STRCRLF             11018B
STRFINISHED         11017B
STRNAKMSG           11016C
STRTITLE            110112
VEC_BASE            100000
VEC_SIZE            400
WRITEBYTE           1100E8
WRITENIBBLE         1100F0
WRITENIBBLE:WN1     110100
